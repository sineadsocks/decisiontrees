# -*- coding: utf-8 -*-
"""Decision trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUB0oRVkuDAWje_At8PHjttgMwkTwBxE
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn import tree
import pydot

iris = load_iris()          #load in iris dataset

clf = tree.DecisionTreeClassifier()    #initialise decision tree classifier

clf = clf.fit(iris.data, iris.target)     #build decision tree (predefined data and target/X and y)

with open('iris.dot', 'w') as f:
  f = tree.export_graphviz(clf, out_file=f)      #creates a 'dot' file that can be read and processed with dot

clf.predict(iris.data[:1, :])         #model being used to predict the class of samples

clf.predict_proba(iris.data[:1, :])      #model being used to predict probabiliy of each class

"""Overcoming overfitting in decision trees

-pruning = limit depth of tree
"""

from sklearn import datasets
import numpy as np
iris=datasets.load_iris()
X=iris.data[:,[2,3]]
y=iris.target

#split into training and test sets

from sklearn. model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33, random_state=0)

#build decision tree classifier with depth of 3

from sklearn.tree import DecisionTreeClassifier
tree= DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)

#fit training data to model
tree.fit(X_train,y_train)

#use mlxtend and matplotlib to visualise results

from mlxtend.plotting import plot_decision_regions
import matplotlib.pyplot as plt
# Plotting decision regions
plot_decision_regions(X, y, clf=tree, legend=2, X_highlight=X_test)
# Adding axes annotations
plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.title('Decision Tree on Iris')
plt.show()

#export decision tree as a .dot file
from sklearn.tree import export_graphviz
export_graphviz(tree,out_file='tree.dot', feature_names=['petal length','petal width'])

import pydot

(graph,) = pydot.graph_from_dot_file('tree.dot')
graph.write_png('tree.png')

#display decision tree

from IPython.display import Image
Image(filename = 'tree.png')

